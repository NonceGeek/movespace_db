{
    "struct": [
        "/// Contains the signer capability that generates the common account signer.\nstruct CommonAccount has key {\n    signer_cap: SignerCapability,\n}",
        "struct Empty has drop, store {}",
        "/// Contains the metadata for managing the account, particularly around adminstration.\nstruct Management has key {\n    /// Entity that adds and removes entities that can support this account.\n    admin: address,\n    /// An ACL that defines entities that have available, unclaimed capabilities to control\n    /// this account.\n    unclaimed_capabilities: SimpleMap<address, Empty>,\n}",
        "/// A revokable capability that is stored on a users account.\nstruct Capability has drop, key {\n    common_account: address,\n}"
    ],
    "event": [],
    "const": [
        "const ENO_MANAGEMENT_RESOURCE_FOUND: u64 = 1;",
        "const ENO_ACCOUNT_RESOURCE_FOUND: u64 = 2;",
        "const ENO_CAPABILITY_FOUND: u64 = 3;",
        "const ENO_CAPABILITY_OFFERED: u64 = 4;",
        "const ENOT_ADMIN: u64 = 5;",
        "const EUNEXPECTED_PARALLEL_ACCOUNT: u64 = 6;"
    ],
    "function": [
        "public entry fun create(sender: &signer, seed: vector<u8>) {\n    let (resource_signer, signer_cap) = account::create_resource_account(sender, seed);\n\n    move_to(\n        &resource_signer,\n        Management {\n            admin: signer::address_of(sender),\n            unclaimed_capabilities: simple_map::create(),\n        },\n    );\n\n    move_to(&resource_signer, CommonAccount { signer_cap });\n}",
        "public entry fun add_account(\n    sender: &signer,\n    common_account: address,\n    other: address,\n) acquires Management {\n    let management = assert_is_admin(sender, common_account);\n    simple_map::add(&mut management.unclaimed_capabilities, other, Empty {});\n}",
        "public entry fun remove_account(\n    admin: &signer,\n    common_account: address,\n    other: address,\n) acquires Capability, Management {\n    let management = assert_is_admin(admin, common_account);\n    if (simple_map::contains_key(&management.unclaimed_capabilities, &other)) {\n        simple_map::remove(&mut management.unclaimed_capabilities, &other);\n    } else {\n        assert!(exists<Capability>(other), error::not_found(ENO_CAPABILITY_FOUND));\n        move_from<Capability>(other);\n    }\n}",
        "public entry fun acquire_capability(\n    sender: &signer,\n    common_account: address,\n) acquires Management {\n    let sender_addr = signer::address_of(sender);\n\n    let management = borrow_management(common_account);\n    assert!(\n        simple_map::contains_key(&management.unclaimed_capabilities, &sender_addr),\n        error::not_found(ENO_CAPABILITY_OFFERED),\n    );\n    simple_map::remove(&mut management.unclaimed_capabilities, &sender_addr);\n\n    move_to(sender, Capability { common_account });\n}",
        "public fun acquire_signer(\n    sender: &signer,\n    common_account: address,\n): signer acquires Capability, CommonAccount, Management {\n    let sender_addr = signer::address_of(sender);\n    if (!exists<Capability>(sender_addr)) {\n      acquire_capability(sender, common_account)\n    };\n    let capability = borrow_global<Capability>(sender_addr);\n\n    assert!(\n        capability.common_account == common_account,\n        error::invalid_state(EUNEXPECTED_PARALLEL_ACCOUNT),\n    );\n\n    let resource = borrow_global<CommonAccount>(common_account);\n    account::create_signer_with_capability(&resource.signer_cap)\n}",
        "inline fun assert_is_admin(admin: &signer, common_account: address): &mut Management {\n    let management = borrow_management(common_account);\n    assert!(\n        signer::address_of(admin) == management.admin,\n        error::permission_denied(ENOT_ADMIN),\n    );\n    management\n}",
        "inline fun borrow_management(common_account: address): &mut Management {\n    assert!(\n        exists<Management>(common_account),\n        error::not_found(ENO_MANAGEMENT_RESOURCE_FOUND),\n    );\n    borrow_global_mut<Management>(common_account)\n}"
    ],
    "test": [
        "public fun test_end_to_end(\n    alice: &signer,\n    bob: &signer,\n) acquires Capability, Management, CommonAccount {\n    let alice_addr = signer::address_of(alice);\n    let bob_addr = signer::address_of(bob);\n    let common_addr = account::create_resource_address(&alice_addr, vector::empty());\n\n    create(alice, vector::empty());\n    add_account(alice, common_addr, bob_addr);\n    acquire_capability(bob, common_addr);\n    let common = acquire_signer(bob, common_addr);\n    assert!(signer::address_of(&common) == common_addr, 0);\n}",
        "public fun test_no_account_capability(\n    alice: &signer,\n    bob: &signer,\n) acquires Management {\n    let alice_addr = signer::address_of(alice);\n    let common_addr = account::create_resource_address(&alice_addr, vector::empty());\n\n    acquire_capability(bob, common_addr);\n}",
        "public fun test_no_account_signer(\n    alice: &signer,\n    bob: &signer,\n) acquires Capability, CommonAccount, Management {\n    let alice_addr = signer::address_of(alice);\n    let common_addr = account::create_resource_address(&alice_addr, vector::empty());\n\n    acquire_signer(bob, common_addr);\n}",
        "public fun test_account_no_capability(\n    alice: &signer,\n    bob: &signer,\n) acquires Management {\n    let alice_addr = signer::address_of(alice);\n    let common_addr = account::create_resource_address(&alice_addr, vector::empty());\n\n    create(alice, vector::empty());\n    acquire_capability(bob, common_addr);\n}",
        "public fun test_account_revoke_none(\n    alice: &signer,\n    bob: &signer,\n) acquires Capability, Management {\n    let alice_addr = signer::address_of(alice);\n    let bob_addr = signer::address_of(bob);\n    let common_addr = account::create_resource_address(&alice_addr, vector::empty());\n\n    create(alice, vector::empty());\n    remove_account(alice, common_addr, bob_addr);\n}",
        "public fun test_account_revoke_capability(\n    alice: &signer,\n    bob: &signer,\n) acquires Capability, Management {\n    let alice_addr = signer::address_of(alice);\n    let bob_addr = signer::address_of(bob);\n    let common_addr = account::create_resource_address(&alice_addr, vector::empty());\n\n    create(alice, vector::empty());\n    add_account(alice, common_addr, bob_addr);\n    acquire_capability(bob, common_addr);\n    remove_account(alice, common_addr, bob_addr);\n}",
        "public fun test_account_revoke_acl(\n    alice: &signer,\n    bob: &signer,\n) acquires Capability, Management {\n    let alice_addr = signer::address_of(alice);\n    let bob_addr = signer::address_of(bob);\n    let common_addr = account::create_resource_address(&alice_addr, vector::empty());\n\n    create(alice, vector::empty());\n    add_account(alice, common_addr, bob_addr);\n    remove_account(alice, common_addr, bob_addr);\n}",
        "public fun test_wrong_admin(\n    alice: &signer,\n    bob: &signer,\n) acquires Management {\n    let alice_addr = signer::address_of(alice);\n    let bob_addr = signer::address_of(bob);\n    let common_addr = account::create_resource_address(&alice_addr, vector::empty());\n\n    create(alice, vector::empty());\n    add_account(bob, common_addr, bob_addr);\n}",
        "public fun test_wrong_cap(\n    alice: &signer,\n    bob: &signer,\n) acquires Capability, Management, CommonAccount {\n    let alice_addr = signer::address_of(alice);\n    let bob_addr = signer::address_of(bob);\n    let alice_common_addr = account::create_resource_address(&alice_addr, vector::empty());\n    let bob_common_addr = account::create_resource_address(&bob_addr, vector::empty());\n\n    create(alice, vector::empty());\n    create(bob, vector::empty());\n    add_account(alice, alice_common_addr, bob_addr);\n    acquire_capability(bob, alice_common_addr);\n    acquire_signer(bob, bob_common_addr);\n}"
    ],
    "module_doc": [
        "/// A framework for sharing a single resource account across multiple accounts.\n///\n/// This creates a resource account with the ability for other signified accounts the ability to\n/// generate the resource accounts signer. Specifically, the creator maintains the ability to add\n/// and remove new accounts that have access to the resource account signer."
    ]
}